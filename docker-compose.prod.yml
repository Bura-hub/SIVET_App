version: '3.8'

services:
  # Base de datos PostgreSQL para producción
  db:
    image: postgres:15-alpine
    container_name: mte_postgres_prod
    environment:
      POSTGRES_DB: ${name_db}
      POSTGRES_USER: ${user_postgres}
      POSTGRES_PASSWORD: ${password_user_postgres}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - mte_network_prod
    restart: unless-stopped
    # No exponer puerto en producción para seguridad

  # Redis para Celery en producción
  redis:
    image: redis:7-alpine
    container_name: mte_redis_prod
    volumes:
      - redis_data_prod:/data
    networks:
      - mte_network_prod
    restart: unless-stopped
    # No exponer puerto en producción para seguridad

  # Backend Django para producción
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: mte_backend_prod
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - name_db=${name_db}
      - user_postgres=${user_postgres}
      - password_user_postgres=${password_user_postgres}
      - port_postgres=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - SCADA_USERNAME=${SCADA_USERNAME}
      - SCADA_PASSWORD=${SCADA_PASSWORD}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
    volumes:
      - ./media:/app/media
      - ./celery.log:/app/celery.log
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    networks:
      - mte_network_prod
    restart: unless-stopped
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn --bind 0.0.0.0:8000 --workers 3 core.wsgi:application"

  # Worker de Celery para producción
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: mte_celery_worker_prod
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - name_db=${name_db}
      - user_postgres=${user_postgres}
      - password_user_postgres=${password_user_postgres}
      - port_postgres=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - SCADA_USERNAME=${SCADA_USERNAME}
      - SCADA_PASSWORD=${SCADA_PASSWORD}
    volumes:
      - ./media:/app/media
      - ./celery.log:/app/celery.log
    depends_on:
      - db
      - redis
    networks:
      - mte_network_prod
    restart: unless-stopped
    command: celery -A core worker -l info --concurrency=4

  # Scheduler de Celery Beat para producción
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: mte_celery_beat_prod
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - name_db=${name_db}
      - user_postgres=${user_postgres}
      - password_user_postgres=${password_user_postgres}
      - port_postgres=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - SCADA_USERNAME=${SCADA_USERNAME}
      - SCADA_PASSWORD=${SCADA_PASSWORD}
    volumes:
      - ./media:/app/media
      - ./celery.log:/app/celery.log
    depends_on:
      - db
      - redis
    networks:
      - mte_network_prod
    restart: unless-stopped
    command: celery -A core beat -l info

  # Frontend React para producción
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: mte_frontend_prod
    ports:
      - "80:3000"
    depends_on:
      - backend
    networks:
      - mte_network_prod
    restart: unless-stopped

  # Nginx como proxy reverso (opcional)
  nginx:
    image: nginx:alpine
    container_name: mte_nginx_prod
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - mte_network_prod
    restart: unless-stopped

volumes:
  postgres_data_prod:
  redis_data_prod:

networks:
  mte_network_prod:
    driver: bridge
