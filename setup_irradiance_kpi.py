#!/usr/bin/env python
"""
Script para configurar y calcular el KPI de irradiancia solar.
Este script:
1. Ejecuta las migraciones necesarias
2. Ejecuta la tarea de c√°lculo de KPIs mensuales
3. Verifica que los datos se hayan calculado correctamente
"""

import os
import sys
import django
from datetime import datetime, timedelta, timezone

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
django.setup()

from django.core.management import execute_from_command_line
from indicators.tasks import calculate_monthly_consumption_kpi
from indicators.models import MonthlyConsumptionKPI

def run_migrations():
    """Ejecuta las migraciones para agregar los campos de irradiancia"""
    print("=== EJECUTANDO MIGRACIONES ===")
    
    try:
        # Ejecutar la migraci√≥n de DailyChartData
        print("1. Ejecutando migraci√≥n para DailyChartData...")
        execute_from_command_line(['manage.py', 'migrate', 'indicators', '0022'])
        
        # Ejecutar la migraci√≥n de MonthlyConsumptionKPI
        print("2. Ejecutando migraci√≥n para MonthlyConsumptionKPI...")
        execute_from_command_line(['manage.py', 'migrate', 'indicators', '0023'])
        
        print("‚úÖ Migraciones ejecutadas correctamente")
        return True
    except Exception as e:
        print(f"‚ùå Error al ejecutar migraciones: {e}")
        return False

def run_kpi_calculation():
    """Ejecuta la tarea de c√°lculo de KPIs mensuales"""
    print("\n=== EJECUTANDO C√ÅLCULO DE KPIs ===")
    
    try:
        print("Calculando KPIs mensuales (incluyendo irradiancia)...")
        
        # Ejecutar la tarea
        result = calculate_monthly_consumption_kpi()
        
        print(f"‚úÖ Tarea completada: {result}")
        return True
        
    except Exception as e:
        print(f"‚ùå Error al calcular KPIs: {e}")
        import traceback
        traceback.print_exc()
        return False

def verify_data():
    """Verifica que los datos de irradiancia se hayan calculado correctamente"""
    print("\n=== VERIFICANDO DATOS ===")
    
    try:
        # Obtener el registro de KPIs
        kpi_record = MonthlyConsumptionKPI.objects.first()
        
        if not kpi_record:
            print("‚ùå No se encontr√≥ registro de KPIs")
            return False
        
        print(f"üìä √öltima actualizaci√≥n: {kpi_record.last_calculated}")
        print(f"üìä Consumo actual: {kpi_record.total_consumption_current_month:.2f} kWh")
        print(f"üìä Generaci√≥n actual: {kpi_record.total_generation_current_month:.2f} kWh")
        print(f"üìä Temperatura actual: {kpi_record.avg_daily_temp_current_month:.2f} ¬∞C")
        print(f"üìä Humedad actual: {kpi_record.avg_relative_humidity_current_month:.2f} %")
        print(f"üìä Viento actual: {kpi_record.avg_wind_speed_current_month:.2f} km/h")
        print(f"üìä Irradiancia actual: {kpi_record.avg_irradiance_current_month:.2f} W/m¬≤")
        print(f"üìä Irradiancia anterior: {kpi_record.avg_irradiance_previous_month:.2f} W/m¬≤")
        
        # Verificar que los campos de irradiancia no sean 0 (a menos que sea real)
        if kpi_record.avg_irradiance_current_month == 0:
            print("‚ö†Ô∏è  La irradiancia actual es 0. Esto puede ser normal si:")
            print("   - No hay datos de irradiancia en el SCADA")
            print("   - Los dispositivos no est√°n enviando datos")
            print("   - El campo en SCADA se llama diferente")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error al verificar datos: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üöÄ CONFIGURANDO KPI DE IRRADIANCIA SOLAR")
    print("Este script configurar√° el sistema para calcular irradiancia solar.")
    print()
    
    # Paso 1: Ejecutar migraciones
    if not run_migrations():
        print("‚ùå Fallaron las migraciones. Abortando...")
        sys.exit(1)
    
    # Paso 2: Ejecutar c√°lculo de KPIs
    if not run_kpi_calculation():
        print("‚ùå Fall√≥ el c√°lculo de KPIs. Abortando...")
        sys.exit(1)
    
    # Paso 3: Verificar datos
    if not verify_data():
        print("‚ùå Fall√≥ la verificaci√≥n de datos. Abortando...")
        sys.exit(1)
    
    print("\n=== CONFIGURACI√ìN COMPLETADA EXITOSAMENTE ===")
    print("‚úÖ Migraciones ejecutadas")
    print("‚úÖ KPIs calculados")
    print("‚úÖ Datos verificados")
    
    print("\nüìù Pr√≥ximos pasos:")
    print("   1. El dashboard ahora mostrar√° el KPI de irradiancia")
    print("   2. Los datos se actualizar√°n autom√°ticamente cada vez que se ejecute la tarea")
    print("   3. Verifica que el campo 'irradiance' en SCADA se llame correctamente")
    
    print("\nüîç Para monitorear:")
    print("   - Admin de Django: /admin/indicators/monthlyconsumptionkpi/")
    print("   - API de KPIs: /api/dashboard/summary/")
    print("   - Logs de Celery para ver el progreso de las tareas")

if __name__ == "__main__":
    main()
