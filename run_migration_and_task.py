#!/usr/bin/env python
"""
Script para ejecutar la migraci√≥n y luego la tarea para calcular datos hist√≥ricos
con los nuevos campos de velocidad del viento e irradiancia.
"""

import os
import sys
import django
from datetime import datetime, timedelta, timezone

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
django.setup()

from django.core.management import execute_from_command_line
from indicators.tasks import calculate_and_save_daily_data

def run_migration():
    """Ejecuta la migraci√≥n para agregar los nuevos campos"""
    print("=== EJECUTANDO MIGRACI√ìN ===")
    
    try:
        # Ejecutar la migraci√≥n
        execute_from_command_line(['manage.py', 'migrate', 'indicators'])
        print("‚úÖ Migraci√≥n ejecutada correctamente")
        return True
    except Exception as e:
        print(f"‚ùå Error al ejecutar la migraci√≥n: {e}")
        return False

def run_task():
    """Ejecuta la tarea para calcular datos hist√≥ricos"""
    print("\n=== EJECUTANDO TAREA DE C√ÅLCULO ===")
    
    try:
        # Definir fechas para calcular datos hist√≥ricos
        end_date = datetime.now(timezone.utc)
        start_date = end_date - timedelta(days=30)  # √öltimos 30 d√≠as
        
        print(f"Calculando datos para fechas: {start_date.date()} -> {end_date.date()}")
        
        # Ejecutar la tarea
        result = calculate_and_save_daily_data.delay(
            start_date_str=start_date.isoformat(),
            end_date_str=end_date.isoformat()
        )
        
        print(f"‚úÖ Tarea ejecutada correctamente")
        print(f"   - ID de la tarea: {result.id}")
        print(f"   - Estado: {result.status}")
        print(f"   - La tarea se ejecutar√° en segundo plano")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error al ejecutar la tarea: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üöÄ INICIANDO PROCESO DE ACTUALIZACI√ìN")
    print("Este script ejecutar√°:")
    print("1. Migraci√≥n para agregar nuevos campos")
    print("2. Tarea para calcular datos hist√≥ricos")
    print()
    
    # Paso 1: Ejecutar migraci√≥n
    if not run_migration():
        print("‚ùå Fall√≥ la migraci√≥n. Abortando...")
        sys.exit(1)
    
    # Paso 2: Ejecutar tarea
    if not run_task():
        print("‚ùå Fall√≥ la ejecuci√≥n de la tarea. Abortando...")
        sys.exit(1)
    
    print("\n=== PROCESO COMPLETADO EXITOSAMENTE ===")
    print("‚úÖ Migraci√≥n ejecutada")
    print("‚úÖ Tarea iniciada")
    print("\nüìù Pr√≥ximos pasos:")
    print("   1. Esperar a que la tarea termine (ver logs de Celery)")
    print("   2. Verificar que las gr√°ficas muestren los nuevos datos")
    print("   3. Los nuevos campos estar√°n disponibles en el dashboard")
    
    print("\nüîç Para monitorear el progreso:")
    print("   - Ver logs de Celery: celery -A core worker --loglevel=info")
    print("   - Ver estado de la tarea en el admin de Django")
    print("   - Verificar la base de datos para nuevos registros")

if __name__ == "__main__":
    main()
