name: mtesive_app

services:
  # ================================
  # Base de datos PostgreSQL
  # ================================
  db:
    image: postgres:17-alpine
    container_name: mte_postgres_prod
    environment:
      POSTGRES_DB: ${name_db}
      POSTGRES_USER: ${user_postgres}
      POSTGRES_PASSWORD: ${password_user_postgres}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
      - ./backups:/backups
    networks:
      - mte_network_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${user_postgres} -d ${name_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # ================================
  # Redis para Celery
  # ================================
  redis:
    image: redis:7-alpine
    container_name: mte_redis_prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data_prod:/data
    networks:
      - mte_network_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # ================================
  # Backend Django
  # ================================
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: production
    image: mtesive_app-backend:latest
    container_name: mte_backend_prod
    ports:
      - "${BACKEND_PORT:-3504}:8000"
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - name_db=${name_db}
      - user_postgres=${user_postgres}
      - password_user_postgres=${password_user_postgres}
      - port_postgres=5432
      - POSTGRES_HOST=db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - SCADA_BASE_URL=${SCADA_BASE_URL}
      - SCADA_USERNAME=${SCADA_USERNAME}
      - SCADA_PASSWORD=${SCADA_PASSWORD}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - DJANGO_SETTINGS_MODULE=core.settings
    volumes:
      - ./media:/app/media
      - ./logs:/app/logs
      - ./static:/app/static
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mte_network_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn --bind 0.0.0.0:8000 --workers 3 --timeout 120 --max-requests 1000 --max-requests-jitter 100 core.wsgi:application"

  # ================================
  # Worker de Celery
  # ================================
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: production
    image: mtesive_app-celery_worker:latest
    container_name: mte_celery_worker_prod
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - name_db=${name_db}
      - user_postgres=${user_postgres}
      - password_user_postgres=${password_user_postgres}
      - port_postgres=5432
      - POSTGRES_HOST=db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - SCADA_BASE_URL=${SCADA_BASE_URL}
      - SCADA_USERNAME=${SCADA_USERNAME}
      - SCADA_PASSWORD=${SCADA_PASSWORD}
      - DJANGO_SETTINGS_MODULE=core.settings
    volumes:
      - ./media:/app/media
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mte_network_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "celery", "-A", "core", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    command: celery -A core worker -l info --concurrency=4 --max-tasks-per-child=1000

  # ================================
  # Scheduler de Celery Beat
  # ================================
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: production
    image: mtesive_app-celery_beat:latest
    container_name: mte_celery_beat_prod
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - name_db=${name_db}
      - user_postgres=${user_postgres}
      - password_user_postgres=${password_user_postgres}
      - port_postgres=5432
      - POSTGRES_HOST=db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - SCADA_BASE_URL=${SCADA_BASE_URL}
      - SCADA_USERNAME=${SCADA_USERNAME}
      - SCADA_PASSWORD=${SCADA_PASSWORD}
      - DJANGO_SETTINGS_MODULE=core.settings
    volumes:
      - ./media:/app/media
      - ./logs:/app/logs
      - ./celerybeat-schedule:/app/celerybeat-schedule
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mte_network_prod
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    command: celery -A core beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler

  # ================================
  # Frontend React
  # ================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    image: mtesive_app-frontend:latest
    container_name: mte_frontend_prod
    ports:
      - "${FRONTEND_PORT:-3503}:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - mte_network_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # ================================
  # Nginx eliminado - Acceso directo a puertos
  # ================================

# ================================
# Volumes
# ================================
volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local

# ================================
# Networks
# ================================
networks:
  mte_network_prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16