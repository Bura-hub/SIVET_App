puedes ayudarme a crear otro endpoint en Django que calcule el balance de energia Sumar importaciones y exportaciones calcular balance neto; con variables exportedActivePowerLow/High, importedActivePowerLow/High. de todos los medidores durante el mes anterior al actual (ej: estamos en Julio mes 7 entonces se calculara todo los datos de todos los medidores de Junio mes 6) y tambien vas el balance en lo que va del ultimo mes (ej:hoy es 22 de julio, entonces se va calcular la suma de estos 22 dias de julio) y con eso vas a compararlos estas son las caracteristicas 	

[
  {
    "id": 2,
    "scada_id": "930ef038-5aa2-4d57-99f3-4a2662483836",
    "name": "electricMeter",
    "description": "Medidores eléctricos",
    "charts": [
        {
        "name": "Potencia Activa Exportada (LOW)",
        "type": "line",
        "variables": [
          {
            "name": "Potencia Activa Exportada (LOW)",
            "key": "exportedActivePowerLow",
            "unit": "[kWh]"
          }
        ]
      },
      {
        "name": "Potencia Activa Exportada (HIGH)",
        "type": "line",
        "variables": [
          {
            "name": "Potencia Activa Exportada (HIGH)",
            "key": "exportedActivePowerHigh",
            "unit": "[MWh]"
          }
        ]
      },
      {
        "name": "Potencia Activa Importada (LOW)",
        "type": "line",
        "variables": [
          {
            "name": "Potencia Activa Importada (LOW)",
            "key": "importedActivePowerLow",
            "unit": "[kWh]"
          }
        ]
      },
      {
        "name": "Potencia Activa Importada (HIGH)",
        "type": "line",
        "variables": [
          {
            "name": "Potencia Activa Importada (HIGH)",
            "key": "importedActivePowerHigh",
            "unit": "[MWh]"
          }
        ]
      },

debe devolverse asi

const [kpiData, setKpiData] = useState({
    energyBalance: { title: "Equilibrio energético", value: "<calculo acumulativo(22 dias julio)", unit: <determina la unidad segun la cantidad>, description: <segun el valor sea "Déficit" u otro>, status: <definir segun value> },

Con esta guia define aun mas claro el codigo del endpoint que creaste para ConsumptionSummary
Cuando leemos hacemos GET /local/device-categories/ nos damos cuenta en el json de respuesta que el "id": 2 es la categoria de electricMeter
    "id": 2,
    "scada_id": "930ef038-5aa2-4d57-99f3-4a2662483836",
    "name": "electricMeter",
    "description": "Medidores eléctricos",
    "charts": [
y si hacemos GET /local/devices/ con Id de categoria 2 obtenemos los id de todos los medidores electricos
Parameters
Cancel
Name	Description
category
integer
(query)
ID de la categoría(1:inv 2:Med 3:Est)

2
institution
integer
(query)
ID de la institución(1:Udenar 2:Cesmag 3:Mar 4:UCC 5:HUDN)

institution
is_active
boolean
(query)
Filtrar dispositivos activos


--
ordering
string
(query)
Ordenar por campos como 'name'

ordering
search
string
(query)
Buscar por nombre o SCADA ID

search
Execute
Clear
Responses
Curl

curl -X 'GET' \
  'http://127.0.0.1:8000/local/devices/?category=2' \
  -H 'accept: application/json'
Request URL
http://127.0.0.1:8000/local/devices/?category=2
Server response
Code	Details
200	
Response body
Download
[
  {
    "id": 1,
    "scada_id": "3ccb420f-e6a0-4461-8dc6-e8568bd699f0",
    "name": "Medidor 2 - Cesmag",
    "status": "online",
    "is_active": true,
    "category": {
      "id": 2,
      "scada_id": "930ef038-5aa2-4d57-99f3-4a2662483836",
      "name": "electricMeter",
      "description": "Medidores eléctricos",
      "charts": []
    },
    "institution": {
      "id": 2,
      "scada_id": "c4be3013-b100-4fca-8ecc-54a5b728a28c",
      "name": "Cesmag"
    }
  },
  {
    "id": 2,
    "scada_id": "4c57e1a2-08e5-4ab4-b37a-c09f4b8d2c02",
    "name": "Medidor 1 - Cesmag",
    "status": "online",
    "is_active": true,
    "category": {
      "id": 2,
      "scada_id": "930ef038-5aa2-4d57-99f3-4a2662483836",
      "name": "electricMeter",
      "description": "Medidores eléctricos",
      "charts": []
y si finalmente hacemos GET /local/measurements/ podemos de entre data obtener las variables que necesitamos(exportedActivePowerHigh, exportedActivePowerLow, importedActivePowerHigh, importedActivePowerLow), asi se llega a las variable
Parameters
Cancel
Name	Description
device
string
(query)
ID o SCADA_ID del dispositivo (string)

3ccb420f-e6a0-4461-8dc6-e8568bd699f0
from_date
string
(query)
Fecha de inicio (ISO 8601) 2025-01-18T13:00:00

2025-05-18T13:00:00
ordering
string
(query)
Ordenar por 'timestamp' o 'value'

ordering
to_date
string
(query)
Fecha final (ISO 8601) 2025-01-18T13:00:00

2025-05-18T14:00:00
Execute
Clear
Responses
Curl

curl -X 'GET' \
  'http://127.0.0.1:8000/local/measurements/?device=3ccb420f-e6a0-4461-8dc6-e8568bd699f0&from_date=2025-05-18T13%3A00%3A00&to_date=2025-05-18T14%3A00%3A00' \
  -H 'accept: application/json'
Request URL
http://127.0.0.1:8000/local/measurements/?device=3ccb420f-e6a0-4461-8dc6-e8568bd699f0&from_date=2025-05-18T13%3A00%3A00&to_date=2025-05-18T14%3A00%3A00
Server response
Code	Details
200	
Response body
Download
[
  {
    "id": 44299,
    "device_name": "Medidor 2 - Cesmag",
    "scada_id": "3ccb420f-e6a0-4461-8dc6-e8568bd699f0",
    "date": "2025-05-18T14:00:00-05:00",
    "data": {
      "frequency": 59.99,
      "outputStatus": 0,
      "currentPhaseA": 0.8,
      "currentPhaseB": 0.4,
      "currentPhaseC": 0.8,
      "voltagePhaseA": 22.1,
      "voltagePhaseB": 22,
      "voltagePhaseC": 21.9,
      "neutralCurrent": 0.4,
      "apparentPowerLow": 170,
      "currentTDDPhaseA": 0,
      "currentTDDPhaseB": 0,
      "currentTDDPhaseC": 0,
      "currentTHDPhaseA": 30.4,
      "currentTHDPhaseB": 5.2,
      "currentTHDPhaseC": 26.1,
      "maxCurrentPhaseA": 29.6,
      "maxCurrentPhaseB": 29.6,
      "maxCurrentPhaseC": 29.6,
      "totalActivePower": -0.017,
      "totalPowerFactor": 1,
      "voltageTHDPhaseA": 2.2,
      "voltageTHDPhaseB": 2.7,
      "voltageTHDPhaseC": 2.5,
      "activePowerPhaseA": -0.017,
      "activePowerPhaseB": -0.017,
      "activePowerPhaseC": -0.017,
      "apparentPowerHigh": 0,
      "powerFactorPhaseA": 1,
      "powerFactorPhaseB": 1,
      "powerFactorPhaseC": 1,
      "totalApparentPower": 0.017,
      "totalReactivePower": -0.017,
      "apparentPowerPhaseA": 0.017,
      "apparentPowerPhaseB": 0.017,
      "apparentPowerPhaseC": 0.017,
      "reactivePowerPhaseA": -0.017,
      "reactivePowerPhaseB": -0.017,
      "reactivePowerPhaseC": -0.017,
      "maxActivePowerDemand": 0.017,
      "cumulativeActivePower": -0.017,
      "exportedActivePowerLow": 165,
      "importedActivePowerLow": 0,
      "maxApparentPowerDemand": 1.918,
      "cumulativeApparentPower": 0.017,
      "exportedActivePowerHigh": 0,
      "importedActivePowerHigh": 0,
      "currentActivePowerDemand": -0.017,
      "negativeReactivePowerLow": 0,
      "positiveReactivePowerLow": 0,
      "negativeReactivePowerHigh": 0,
      "positiveReactivePowerHigh": 0,
      "currentApparentPowerDemand": 0.121,
      "powerFactorMaxImportedApparentPower": 0.5
    },
    "device": 1