# Generated by Django 5.2.4 on 2025-08-12 05:29

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('indicators', '0018_electricmeterindicators'),
        ('scada_proxy', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='InverterChartData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(help_text='Fecha del registro.')),
                ('hourly_efficiency', models.JSONField(default=list, help_text='Eficiencia por hora del día en porcentaje.')),
                ('hourly_generation', models.JSONField(default=list, help_text='Generación por hora del día en kWh.')),
                ('hourly_irradiance', models.JSONField(default=list, help_text='Irradiancia por hora del día en W/m².')),
                ('hourly_temperature', models.JSONField(default=list, help_text='Temperatura por hora del día en °C.')),
                ('hourly_dc_power', models.JSONField(default=list, help_text='Potencia DC por hora del día en W.')),
                ('hourly_ac_power', models.JSONField(default=list, help_text='Potencia AC por hora del día en W.')),
                ('calculated_at', models.DateTimeField(auto_now=True, help_text='Fecha y hora del cálculo.')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inverter_chart_data', to='scada_proxy.device')),
                ('institution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inverter_chart_data', to='scada_proxy.institution')),
            ],
            options={
                'verbose_name': 'Datos de Gráfico de Inversor',
                'verbose_name_plural': 'Datos de Gráficos de Inversores',
                'indexes': [models.Index(fields=['device', 'date'], name='indicators__device__0e4683_idx'), models.Index(fields=['institution', 'date'], name='indicators__institu_aad381_idx'), models.Index(fields=['date'], name='indicators__date_2c3d46_idx')],
                'unique_together': {('device', 'date')},
            },
        ),
        migrations.CreateModel(
            name='InverterIndicators',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(help_text='Fecha del registro (para datos diarios) o primer día del mes (para datos mensuales).')),
                ('time_range', models.CharField(choices=[('daily', 'Diario'), ('monthly', 'Mensual')], help_text='Tipo de rango de tiempo del registro.', max_length=20)),
                ('dc_ac_efficiency_pct', models.FloatField(default=0.0, help_text='Eficiencia de conversión DC-AC en porcentaje.')),
                ('energy_ac_daily_kwh', models.FloatField(default=0.0, help_text='Energía AC generada diaria en kWh.')),
                ('energy_dc_daily_kwh', models.FloatField(default=0.0, help_text='Energía DC recibida diaria en kWh.')),
                ('total_generated_energy_kwh', models.FloatField(default=0.0, help_text='Energía total generada en kWh.')),
                ('performance_ratio_pct', models.FloatField(default=0.0, help_text='Performance Ratio en porcentaje.')),
                ('reference_energy_kwh', models.FloatField(default=0.0, help_text='Energía de referencia en kWh.')),
                ('avg_irradiance_wm2', models.FloatField(default=0.0, help_text='Irradiancia promedio en W/m².')),
                ('avg_temperature_c', models.FloatField(default=0.0, help_text='Temperatura promedio en °C.')),
                ('max_power_w', models.FloatField(default=0.0, help_text='Potencia máxima generada en W.')),
                ('min_power_w', models.FloatField(default=0.0, help_text='Potencia mínima generada en W.')),
                ('avg_power_factor_pct', models.FloatField(default=0.0, help_text='Factor de potencia promedio en porcentaje.')),
                ('avg_reactive_power_var', models.FloatField(default=0.0, help_text='Potencia reactiva promedio en VAr.')),
                ('avg_apparent_power_va', models.FloatField(default=0.0, help_text='Potencia aparente promedio en VA.')),
                ('avg_frequency_hz', models.FloatField(default=0.0, help_text='Frecuencia promedio en Hz.')),
                ('frequency_stability_pct', models.FloatField(default=0.0, help_text='Estabilidad de frecuencia en porcentaje.')),
                ('max_voltage_unbalance_pct', models.FloatField(default=0.0, help_text='Desbalance máximo de tensión en porcentaje.')),
                ('max_current_unbalance_pct', models.FloatField(default=0.0, help_text='Desbalance máximo de corriente en porcentaje.')),
                ('anomaly_score', models.FloatField(default=0.0, help_text='Puntuación de anomalías (0-100, 0=sin anomalías).')),
                ('anomaly_details', models.JSONField(default=dict, help_text='Detalles de anomalías detectadas.')),
                ('measurement_count', models.IntegerField(default=0, help_text='Número de mediciones procesadas.')),
                ('last_measurement_date', models.DateTimeField(blank=True, help_text='Fecha de la última medición procesada.', null=True)),
                ('calculated_at', models.DateTimeField(auto_now=True, help_text='Fecha y hora del cálculo.')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inverter_indicators', to='scada_proxy.device')),
                ('institution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inverter_indicators', to='scada_proxy.institution')),
            ],
            options={
                'verbose_name': 'Indicadores de Inversor',
                'verbose_name_plural': 'Indicadores de Inversores',
                'indexes': [models.Index(fields=['device', 'date', 'time_range'], name='indicators__device__4d678c_idx'), models.Index(fields=['institution', 'date', 'time_range'], name='indicators__institu_354f69_idx'), models.Index(fields=['date', 'time_range'], name='indicators__date_5bda50_idx')],
                'unique_together': {('device', 'date', 'time_range')},
            },
        ),
    ]
