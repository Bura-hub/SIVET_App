#!/usr/bin/env python3
"""
Script de diagn√≥stico para ver los valores exactos que se est√°n usando
para calcular los KPIs en el backend.
"""

import os
import sys
import django
from datetime import datetime, timedelta
from decimal import Decimal

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
django.setup()

from indicators.models import MonthlyConsumptionKPI, Measurement, Device
from django.db.models import Sum, Avg, Count, Q, F
from django.db.models.functions import TruncDay, Cast
from django.db.models import FloatField
from django.utils import timezone

def debug_kpi_values():
    """Muestra los valores exactos usados para calcular los KPIs"""
    
    print("=" * 80)
    print("DIAGN√ìSTICO DE VALORES KPI - BACKEND")
    print("=" * 80)
    
    # 1. Obtener el registro KPI actual
    try:
        kpi_record = MonthlyConsumptionKPI.objects.first()
        if not kpi_record:
            print("‚ùå No se encontr√≥ registro de KPI mensual")
            return
        print(f"‚úÖ Registro KPI encontrado (ID: {kpi_record.id})")
        print(f"üìÖ √öltima actualizaci√≥n: {kpi_record.last_calculated}")
        print()
    except Exception as e:
        print(f"‚ùå Error obteniendo registro KPI: {e}")
        return
    
    # 2. Mostrar valores almacenados en el KPI
    print("üìä VALORES ALMACENADOS EN EL KPI:")
    print("-" * 50)
    print(f"Consumo mes actual:     {kpi_record.total_consumption_current_month:>15.2f} kWh")
    print(f"Consumo mes anterior:   {kpi_record.total_consumption_previous_month:>15.2f} kWh")
    print(f"Generaci√≥n mes actual:  {kpi_record.total_generation_current_month:>15.2f} kWh")
    print(f"Generaci√≥n mes anterior:{kpi_record.total_generation_previous_month:>15.2f} kWh")
    print()
    
    # 3. Calcular el porcentaje de cambio manualmente
    if kpi_record.total_consumption_previous_month > 0:
        consumption_change = ((kpi_record.total_consumption_current_month - kpi_record.total_consumption_previous_month) / kpi_record.total_consumption_previous_month) * 100
        print("üßÆ C√ÅLCULO DEL PORCENTAJE DE CAMBIO:")
        print("-" * 50)
        print(f"F√≥rmula: (({kpi_record.total_consumption_current_month:.2f} - {kpi_record.total_consumption_previous_month:.2f}) / {kpi_record.total_consumption_previous_month:.2f}) √ó 100")
        print(f"Resultado: {consumption_change:.2f}%")
        print()
        
        if abs(consumption_change - 33.35) < 0.1:
            print("üéØ ¬°ENCONTRADO! Este es el valor que genera el 33.35%")
        else:
            print(f"‚ùì El porcentaje calculado ({consumption_change:.2f}%) no coincide con 33.35%")
    else:
        print("‚ö†Ô∏è  No se puede calcular el porcentaje (valor anterior es 0)")
        print()
    
    # 4. Verificar si hay discrepancias en las unidades
    print("üîç VERIFICACI√ìN DE UNIDADES:")
    print("-" * 50)
    
    # Verificar si hay valores muy grandes (posiblemente en Wh en lugar de kWh)
    if kpi_record.total_consumption_current_month > 1000000:  # M√°s de 1M kWh
        print(f"‚ö†Ô∏è  Consumo actual muy alto: {kpi_record.total_consumption_current_month:.2f} kWh")
        print("   Posiblemente est√° en Wh en lugar de kWh")
        print(f"   En Wh ser√≠a: {kpi_record.total_consumption_current_month * 1000:.2f} Wh")
        print(f"   En MWh ser√≠a: {kpi_record.total_consumption_current_month / 1000:.2f} MWh")
    
    if kpi_record.total_consumption_previous_month > 1000000:
        print(f"‚ö†Ô∏è  Consumo anterior muy alto: {kpi_record.total_consumption_previous_month:.2f} kWh")
        print("   Posiblemente est√° en Wh en lugar de kWh")
        print(f"   En Wh ser√≠a: {kpi_record.total_consumption_previous_month * 1000:.2f} Wh")
        print(f"   En MWh ser√≠a: {kpi_record.total_consumption_previous_month / 1000:.2f} MWh")
    
    print()
    
    # 5. Mostrar algunos registros de medici√≥n recientes para verificar
    print("üìã REGISTROS DE MEDICI√ìN RECIENTES:")
    print("-" * 50)
    
    try:
        # Obtener medidores el√©ctricos
        electric_meters = Device.objects.filter(category__id=2, is_active=True)
        print(f"Medidores el√©ctricos activos: {electric_meters.count()}")
        
        if electric_meters.exists():
            # Mostrar algunas mediciones recientes
            recent_measurements = Measurement.objects.filter(
                device__in=electric_meters,
                data__totalActivePower__isnull=False
            ).order_by('-date')[:5]
            
            print(f"√öltimas 5 mediciones con totalActivePower:")
            for i, measurement in enumerate(recent_measurements, 1):
                print(f"  {i}. {measurement.device.name} - {measurement.date}: {measurement.data.get('totalActivePower', 'N/A')} kWh")
        
        print()
        
    except Exception as e:
        print(f"‚ùå Error obteniendo mediciones: {e}")
        print()
    
    # 6. Resumen
    print("üìù RESUMEN:")
    print("-" * 50)
    print("Para encontrar el origen del 33.35%, verifica:")
    print("1. Los valores mostrados arriba en 'VALORES ALMACENADOS'")
    print("2. Si hay discrepancias de unidades (Wh vs kWh vs MWh)")
    print("3. Si los valores coinciden con lo que esperas ver")
    print()
    print("=" * 80)

if __name__ == "__main__":
    debug_kpi_values()
